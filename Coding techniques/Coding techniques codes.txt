lab1

X = input ('enter the no of symbol'); 
N = 1:X;
disp('the no of symbols are N'); 
disp (N);
P=input('enter the no of probablities -'); 
disp('the probablities are');
disp (P);
S = sort (P, 'descend');
disp('the sorted probablites are'); 
disp(S);
[dict, avglen] = huffmandict(N, S); 
disp('the avg length of code is'); 
disp (avglen);
H=0;
for i=1:X
H =H+ (P(i) *log2 (1/P(i)));
end disp('entropy is'); 
disp (H); 
disp('bits/msg');
E= (H/avglen)*100; 
disp('efficency is'); 
disp (E);
codeword = huffmanenco (N, dict); 
disp('the code word are'); disp(codeword);
decode =huffmandeco (codeword, dict); 
disp('the decoded output is');
disp (decode);


lab4

K = 3;
G1 = 7;
G2 = 5;
msg = [1 1 0 0 1 0]
trel = poly2trellis(K,[G1,G2]); coded = convenc(msg,trel); tblen = length(msg);
decoded = vitdec(coded,trel,tblen,'trunc','hard')


lab 5

clc;
clear all;
close all;
% Generator Matrix of (7,4) block code
G = [1 0 0 0 1 1 1;
     0 1 0 0 1 1 0;
     0 0 1 0 1 0 1;
     0 0 0 1 0 1 1]
 %size
 k=4;
 n=7;
 % message Vectors
 m = [0 1 1 0;
      0 1 0 1;
      1 0 0 1]
 % complete code vector
 code_vector = rem(m * G, 2)
 code = encode(m,7,4,'linear/binary',G)
 parmat = hammgen(3)
 trt = syndtable(parmat)
 m=decode(code,7,4,'linear/binary',G,trt)



lab 6

clc;
clear all;
close all;
% Given H Matrix
H = [1 0 1 1 1 0 0;
	1 1 0 1 0 1 0;
	0 1 1 1 0 0 1];
H
k = 4;
n = 7;
P = H';
L = P;
L((5:7), : ) = [];
I = eye(k);
G = [I L]
no = 2 ^ k;
for i = 1 : 2^k
    for j = k : -1 : 1
	if rem(i - 1, 2 ^ (-j + k + 1)) >= 2 ^ (-j + k)
        u(i, j) = 1;
    else
        u(i, j) = 0;
	end
	echo off;
    end
end
echo on;
u
Code_vector = rem(u * G, 2)


lab7 a

n = 7;
k =4;
gx = [1 1 0 1];
d = de2bi(0:2^(k-1),'left-msb')
[i,px]=cyclgen(7,gx,'system')
g = circshift(px,[0,4])
c=rem(d*g,2)


lab 7b

clc;
clear all;
close all;
n  = input('enter the code bits: n:');
k=input('enter the data bits:k:');
m=n-k;
disp(m);
z=2^m;
disp(z);
i=0;
for j=0:1:n
    sum=0;
    for i=0:1:j
        c=factorial(n)/factorial(n-i)*factorial(i);
        sum=sum+c;
    end
    if sum >=z
        j=j-1;
        sum=sum-c;
        break;
    end
end
ans = sprintf('(%d,%d) can correct all combinations of  %d errors and it can also correct %d combintions of %d error',n,k,j,z-sum,j+1); 
disp(ans);


